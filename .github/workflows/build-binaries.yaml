name: Build Multi-Platform Binaries

on:
  push:
    branches:
      - main      # Run on pushes to main
      - master    # Also support master branch
    tags:
      - 'v*'      # Also run on version tags
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:  # Allow manual trigger

jobs:
  # Create release only for tags
  create_release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Ambivo Database CLI Suite ${{ github.ref_name }}
        body: |
          ## Ambivo Database CLI Suite Release ${{ github.ref_name }}
          
          ### 📦 Downloads
          
          #### MySQL CLI (Optimized for MySQL only)
          - **Linux x64**: `ambivo-mysql-cli-linux-x64.tar.gz`
          - **macOS Intel**: `ambivo-mysql-cli-macos-x64.dmg` 🍎
          - **macOS Apple Silicon**: `ambivo-mysql-cli-macos-arm64.dmg` 🍎
          - **Windows x64**: `ambivo-mysql-cli-windows-x64.zip`
          
          #### Multi-Database CLI (MySQL, PostgreSQL, SQLite, DuckDB)
          - **Linux x64**: `ambivo-db-cli-linux-x64.tar.gz`
          - **macOS Intel**: `ambivo-db-cli-macos-x64.dmg` 🍎
          - **macOS Apple Silicon**: `ambivo-db-cli-macos-arm64.dmg` 🍎
          - **Windows x64**: `ambivo-db-cli-windows-x64.zip`
          
          ### ✨ Features
          - ✅ Standalone executables (no Python installation required)
          - ✅ Full database connectivity (MySQL, PostgreSQL, SQLite, DuckDB)
          - ✅ CSV import capabilities with intelligent mapping
          - ✅ Command history and tab completion
          - ✅ Professional table formatting
          - ✅ Interactive setup for first-time users
          - ✅ Pure Python MySQL driver (no authentication plugin issues)
          
          ### 🚀 Quick Start
          1. Download the appropriate package for your platform and needs
          2. **Linux**: Extract tar.gz and run executable
          3. **macOS**: Mount DMG and copy to Applications or run directly
          4. **Windows**: Extract ZIP and run executable
          5. For interactive setup: just run the executable without arguments
          
          ### 💡 Binary Sizes
          - **MySQL CLI**: ~35MB (MySQL-only, optimized)
          - **Multi-Database CLI**: ~50MB (all databases)
          
          Built with ❤️ by Hemant Gosain 'Sunny' at Ambivo
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build ${{ matrix.os }} - ${{ matrix.cli_type }}
    runs-on: ${{ matrix.os }}
    needs: [create_release]
    if: always()  # Run even if create_release is skipped
    strategy:
      fail-fast: false  # Don't cancel other jobs if one fails
      matrix:
        include:
          # MySQL CLI builds
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: ""
            package_format: "tar.gz"
            cli_type: "mysql"
            app_name: "ambivo-mysql-cli"
            python_file: "mysql_cli.py"
          - os: macos-13  # Intel Mac
            platform: macos
            arch: x64
            ext: ""
            package_format: "dmg"
            cli_type: "mysql"
            app_name: "ambivo-mysql-cli"
            python_file: "mysql_cli.py"
          - os: macos-14  # Apple Silicon
            platform: macos
            arch: arm64
            ext: ""
            package_format: "dmg"
            cli_type: "mysql"
            app_name: "ambivo-mysql-cli"
            python_file: "mysql_cli.py"
          - os: windows-latest
            platform: windows
            arch: x64
            ext: ".exe"
            package_format: "zip"
            cli_type: "mysql"
            app_name: "ambivo-mysql-cli"
            python_file: "mysql_cli.py"

          # Multi-Database CLI builds
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: ""
            package_format: "tar.gz"
            cli_type: "db"
            app_name: "ambivo-db-cli"
            python_file: "db_cli.py"
          - os: macos-13  # Intel Mac
            platform: macos
            arch: x64
            ext: ""
            package_format: "dmg"
            cli_type: "db"
            app_name: "ambivo-db-cli"
            python_file: "db_cli.py"
          - os: macos-14  # Apple Silicon
            platform: macos
            arch: arm64
            ext: ""
            package_format: "dmg"
            cli_type: "db"
            app_name: "ambivo-db-cli"
            python_file: "db_cli.py"
          - os: windows-latest
            platform: windows
            arch: x64
            ext: ".exe"
            package_format: "zip"
            cli_type: "db"
            app_name: "ambivo-db-cli"
            python_file: "db_cli.py"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', 'mysql_cli.py', 'db_cli.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies with PyMySQL
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install "setuptools>=65.0.0,<70.0.0"
        pip install "pyinstaller>=5.13.0,<6.0.0"
        pip install PyMySQL  # Pure Python MySQL driver
        pip install psycopg2-binary
        pip install duckdb
        pip install "pandas>=1.5.0,<3.0.0"
        pip install "sqlalchemy>=1.4.0,<3.0.0"
        pip install tabulate

    - name: Install macOS packaging tools
      if: matrix.platform == 'macos'
      shell: bash
      run: |
        # Install create-dmg for creating professional DMG files
        brew install create-dmg
        # Verify installation
        create-dmg --version

    - name: Display Python and package versions
      shell: bash
      run: |
        python --version
        pip list | grep -E "(setuptools|pyinstaller|pandas|sqlalchemy|PyMySQL)"

    - name: Set environment variables for distutils fix
      shell: bash
      run: |
        echo "SETUPTOOLS_USE_DISTUTILS=local" >> $GITHUB_ENV
        echo "DISTUTILS_USE_SDK=1" >> $GITHUB_ENV
        echo "PYTHONWARNINGS=ignore" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date -u +%Y-%m-%d)" >> $GITHUB_ENV

    - name: Create specs directory and hooks
      shell: bash
      run: |
        mkdir -p specs hooks
        
        # Create warning suppression hook
        cat > hooks/rthook_suppress_warnings.py << 'EOF'
        import warnings
        import os
        import sys
        
        # Suppress all warnings
        os.environ['PYTHONWARNINGS'] = 'ignore'
        warnings.filterwarnings("ignore")
        warnings.simplefilter("ignore")
        
        # Suppress specific warning categories
        for category in [UserWarning, DeprecationWarning, FutureWarning, 
                        PendingDeprecationWarning, ImportWarning, ResourceWarning]:
            warnings.filterwarnings("ignore", category=category)
            
        # Redirect stderr to suppress remaining warnings
        import io
        sys.stderr = io.StringIO()
        EOF

        # Create startup message hook for macOS
        cat > hooks/rthook_startup_message.py << 'EOF'
        import sys
        import platform

        # Show immediate loading message on macOS
        if platform.system().lower() == 'darwin':
            print("🚀 Starting Ambivo Database CLI...")
            print("   Loading dependencies, please wait...")
            sys.stdout.flush()
        EOF

    - name: Create MySQL CLI spec file
      if: matrix.cli_type == 'mysql'
      shell: bash
      run: |
        cat > specs/mysql_cli.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        import os
        from PyInstaller.utils.hooks import collect_data_files

        APP_NAME = "ambivo-mysql-cli"
        block_cipher = None

        try:
            pandas_datas = collect_data_files('pandas')
        except:
            pandas_datas = []

        try:
            sqlalchemy_datas = collect_data_files('sqlalchemy')
        except:
            sqlalchemy_datas = []

        hiddenimports = [
            'pymysql', 'pymysql.cursors', 'pymysql.connections',
            'pymysql.constants', 'pymysql.converters', 'pymysql.charset',
            'pandas', 'pandas.io.sql', 'sqlalchemy', 'sqlalchemy.dialects.mysql',
            'sqlalchemy.dialects.mysql.pymysql', 'tabulate', 'importlib_metadata'
        ]

        if sys.platform.startswith('win'):
            hiddenimports.extend(['win32api', 'win32con'])
        elif sys.platform.startswith('darwin'):
            hiddenimports.extend(['readline'])

        a = Analysis(
            ['mysql_cli.py'],
            pathex=[],
            binaries=[],
            datas=pandas_datas + sqlalchemy_datas,
            hiddenimports=hiddenimports,
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[
                'hooks/rthook_suppress_warnings.py',
                'hooks/rthook_startup_message.py'
            ],
            excludes=[
                'mysql.connector', 'psycopg2', 'duckdb', 'sqlite3', 
                'matplotlib', 'tkinter', 'PyQt5', 'PyQt6',
                'scipy', 'sklearn', 'tensorflow', 'torch', 'IPython', 'jupyter',
                'PIL', 'numpy.distutils', 'distutils'
            ],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz, a.scripts, a.binaries, a.zipfiles, a.datas, [],
            name=APP_NAME,
            debug=False,
            bootloader_ignore_signals=False,
            strip=True,  # Strip symbols for smaller size
            upx=False if sys.platform.startswith('darwin') else True,  # Disable UPX on macOS
            upx_exclude=['python*.dll', 'api-ms-win-*.dll', 'vcruntime*.dll'],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF

    - name: Create Multi-DB CLI spec file
      if: matrix.cli_type == 'db'
      shell: bash
      run: |
        cat > specs/db_cli.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        import os
        from PyInstaller.utils.hooks import collect_data_files

        APP_NAME = "ambivo-db-cli"
        block_cipher = None

        try:
            pandas_datas = collect_data_files('pandas')
        except:
            pandas_datas = []

        try:
            sqlalchemy_datas = collect_data_files('sqlalchemy')
        except:
            sqlalchemy_datas = []

        hiddenimports = [
            # MySQL via PyMySQL
            'pymysql', 'pymysql.cursors', 'pymysql.connections',
            'pymysql.constants', 'pymysql.converters', 'pymysql.charset',
            # Other database drivers
            'psycopg2', 'psycopg2.extras', 'duckdb', 'sqlite3',
            # Data processing
            'pandas', 'pandas.io.sql', 'sqlalchemy', 'sqlalchemy.dialects.mysql',
            'sqlalchemy.dialects.mysql.pymysql', 'sqlalchemy.dialects.postgresql', 
            'sqlalchemy.dialects.sqlite', 'tabulate', 'importlib_metadata'
        ]

        if sys.platform.startswith('win'):
            hiddenimports.extend(['win32api', 'win32con'])
        elif sys.platform.startswith('darwin'):
            hiddenimports.extend(['readline'])

        a = Analysis(
            ['db_cli.py'],
            pathex=[],
            binaries=[],
            datas=pandas_datas + sqlalchemy_datas,
            hiddenimports=hiddenimports,
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[
                'hooks/rthook_suppress_warnings.py',
                'hooks/rthook_startup_message.py'
            ],
            excludes=[
                'mysql.connector', 'matplotlib', 'tkinter', 'PyQt5', 'PyQt6',
                'scipy', 'sklearn', 'tensorflow', 'torch', 'IPython', 'jupyter',
                'PIL', 'numpy.distutils', 'distutils', 'test', 'tests'
            ],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz, a.scripts, a.binaries, a.zipfiles, a.datas, [],
            name=APP_NAME,
            debug=False,
            bootloader_ignore_signals=False,
            strip=True,  # Strip symbols for smaller size
            upx=False if sys.platform.startswith('darwin') else True,  # Disable UPX on macOS
            upx_exclude=['python*.dll', 'api-ms-win-*.dll', 'vcruntime*.dll'],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        EOF

    - name: Build CLI Application
      shell: bash
      run: |
        echo "🔨 Building ${{ matrix.cli_type }} CLI with PyMySQL..."
        
        # Create output directory
        mkdir -p "dist/${{ matrix.platform }}-${{ matrix.arch }}"
        
        # Choose the correct spec file
        if [ "${{ matrix.cli_type }}" = "mysql" ]; then
          SPEC_FILE="specs/mysql_cli.spec"
        else
          SPEC_FILE="specs/db_cli.spec"
        fi
        
        # Try spec file first
        if python -m PyInstaller "$SPEC_FILE" \
           --distpath "dist/${{ matrix.platform }}-${{ matrix.arch }}" \
           --workpath "build/${{ matrix.cli_type }}_cli_spec" \
           --clean; then
          echo "✅ ${{ matrix.cli_type }} CLI built successfully with spec file"
        else
          echo "⚠️ Spec file failed, trying direct build..."
          
          # Determine hidden imports based on CLI type
          if [ "${{ matrix.cli_type }}" = "mysql" ]; then
            HIDDEN_IMPORTS="--hidden-import=pymysql \
              --hidden-import=pymysql.cursors \
              --hidden-import=pymysql.connections \
              --hidden-import=pymysql.constants \
              --hidden-import=pymysql.converters \
              --hidden-import=pymysql.charset \
              --hidden-import=pandas \
              --hidden-import=pandas.io.sql \
              --hidden-import=sqlalchemy \
              --hidden-import=sqlalchemy.engine \
              --hidden-import=sqlalchemy.dialects.mysql \
              --hidden-import=sqlalchemy.dialects.mysql.pymysql \
              --hidden-import=tabulate \
              --hidden-import=importlib_metadata \
              --exclude-module=mysql.connector \
              --exclude-module=psycopg2 \
              --exclude-module=duckdb"
          else
            HIDDEN_IMPORTS="--hidden-import=pymysql \
              --hidden-import=pymysql.cursors \
              --hidden-import=pymysql.connections \
              --hidden-import=pymysql.constants \
              --hidden-import=pymysql.converters \
              --hidden-import=pymysql.charset \
              --hidden-import=psycopg2 \
              --hidden-import=psycopg2.extras \
              --hidden-import=duckdb \
              --hidden-import=sqlite3 \
              --hidden-import=pandas \
              --hidden-import=pandas.io.sql \
              --hidden-import=sqlalchemy \
              --hidden-import=sqlalchemy.engine \
              --hidden-import=sqlalchemy.dialects.mysql \
              --hidden-import=sqlalchemy.dialects.mysql.pymysql \
              --hidden-import=sqlalchemy.dialects.postgresql \
              --hidden-import=sqlalchemy.dialects.sqlite \
              --hidden-import=tabulate \
              --hidden-import=importlib_metadata \
              --exclude-module=mysql.connector"
          fi
          
          # Fallback to direct build
          python -m PyInstaller \
            --onefile \
            --name="${{ matrix.app_name }}" \
            --console \
            --clean \
            --distpath "dist/${{ matrix.platform }}-${{ matrix.arch }}" \
            --workpath "build/${{ matrix.cli_type }}_cli_direct" \
            $HIDDEN_IMPORTS \
            --exclude-module=matplotlib \
            --exclude-module=tkinter \
            --exclude-module=PyQt5 \
            --exclude-module=PyQt6 \
            --exclude-module=scipy \
            --exclude-module=sklearn \
            --exclude-module=tensorflow \
            --exclude-module=torch \
            --exclude-module=PIL \
            --exclude-module=numpy.distutils \
            --exclude-module=distutils \
            --runtime-hook=hooks/rthook_suppress_warnings.py \
            --runtime-hook=hooks/rthook_startup_message.py \
            "${{ matrix.python_file }}" && echo "✅ ${{ matrix.cli_type }} CLI built with direct method" || echo "❌ ${{ matrix.cli_type }} CLI build failed completely"
        fi

    - name: Verify build and create summary
      shell: bash
      run: |
        cd "dist/${{ matrix.platform }}-${{ matrix.arch }}"
        
        echo "📋 Build Summary for ${{ matrix.cli_type }}-${{ matrix.platform }}-${{ matrix.arch }}:"
        
        if [ -f "${{ matrix.app_name }}${{ matrix.ext }}" ]; then
          if command -v stat >/dev/null 2>&1; then
            size=$(stat -c%s "${{ matrix.app_name }}${{ matrix.ext }}" 2>/dev/null || stat -f%z "${{ matrix.app_name }}${{ matrix.ext }}" 2>/dev/null || echo "0")
            if command -v bc >/dev/null 2>&1; then
              size_mb=$(echo "scale=1; $size / 1024 / 1024" | bc -l 2>/dev/null || echo "N/A")
            else
              size_mb=$(python -c "print(f'{$size / 1024 / 1024:.1f}')" 2>/dev/null || echo "N/A")
            fi
          else
            size_mb="N/A"
          fi
          echo "✅ ${{ matrix.cli_type }} CLI: ${size_mb}MB (PyMySQL-powered)"
          echo "build_success=true" >> $GITHUB_ENV
        else
          echo "❌ ${{ matrix.cli_type }} CLI: Build failed"
          echo "build_success=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Create convenience scripts (Unix)
      if: matrix.platform != 'windows' && env.build_success == 'true'
      shell: bash
      run: |
        cd "dist/${{ matrix.platform }}-${{ matrix.arch }}"
        
        if [ "${{ matrix.cli_type }}" = "mysql" ]; then
          cat > mysql << 'EOF'
        #!/bin/bash
        DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        exec "$DIR/ambivo-mysql-cli" "$@"
        EOF
          chmod +x mysql
          echo "✅ Created mysql convenience script"
        else
          cat > dbcli << 'EOF'
        #!/bin/bash
        DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        exec "$DIR/ambivo-db-cli" "$@"
        EOF
          chmod +x dbcli
          echo "✅ Created dbcli convenience script"
        fi

    - name: Create convenience scripts (Windows)
      if: matrix.platform == 'windows' && env.build_success == 'true'
      shell: bash
      run: |
        cd "dist/${{ matrix.platform }}-${{ matrix.arch }}"
        
        if [ "${{ matrix.cli_type }}" = "mysql" ]; then
          echo '@echo off' > mysql.bat
          echo 'set "DIR=%~dp0"' >> mysql.bat
          echo '"%DIR%ambivo-mysql-cli.exe" %*' >> mysql.bat
          echo "✅ Created mysql.bat convenience script"
        else
          echo '@echo off' > dbcli.bat
          echo 'set "DIR=%~dp0"' >> dbcli.bat
          echo '"%DIR%ambivo-db-cli.exe" %*' >> dbcli.bat
          echo "✅ Created dbcli.bat convenience script"
        fi

    - name: Create README and install scripts
      if: env.build_success == 'true'
      shell: bash
      run: |
        cd "dist/${{ matrix.platform }}-${{ matrix.arch }}"
        
        # Create CLI-specific README
        if [ "${{ matrix.cli_type }}" = "mysql" ]; then
          CLI_NAME="MySQL CLI"
          CLI_DESC="Dedicated MySQL client with 95%+ MySQL cheat sheet compatibility (PyMySQL-powered)"
          APP_NAME="ambivo-mysql-cli"
          CONVENIENCE_NAME="mysql"
          EXAMPLES="./ambivo-mysql-cli${{ matrix.ext }} -H localhost -u root -p
        ./ambivo-mysql-cli${{ matrix.ext }} -H myserver -u admin -d production"
        else
          CLI_NAME="Multi-Database CLI"
          CLI_DESC="Universal database client supporting MySQL, PostgreSQL, SQLite, and DuckDB (PyMySQL-powered)"
          APP_NAME="ambivo-db-cli"
          CONVENIENCE_NAME="dbcli"
          EXAMPLES="./ambivo-db-cli${{ matrix.ext }} mysql -H localhost -u root -p -d mydb
        ./ambivo-db-cli${{ matrix.ext }} postgresql -H localhost -u postgres -d mydb
        ./ambivo-db-cli${{ matrix.ext }} sqlite -f database.db
        ./ambivo-db-cli${{ matrix.ext }} duckdb -f analytics.db"
        fi
        
        # Create platform-specific README
        if [ "${{ matrix.platform }}" = "macos" ]; then
          cat > README.txt << EOF
        # Ambivo $CLI_NAME - macOS ${{ matrix.arch }}
        
        ## Application
        ✅ $APP_NAME - $CLI_DESC
        
        ## Quick Installation (Recommended)
        1. Copy the application to your Applications folder:
           - Drag $APP_NAME to /Applications/
        
        2. Or use the install script: ./install.sh
        
        ## Interactive Mode (Recommended for beginners)
        Just run the executable without any arguments for guided setup:
        ./$APP_NAME
        
        ## Command Line Examples
        $EXAMPLES
        
        ## Terminal Access
        Add to ~/.zshrc or ~/.bash_profile:
        export PATH=\$PATH:/Applications
        
        Then use from anywhere:
        $APP_NAME
        $CONVENIENCE_NAME  # Short alias
        
        ## Features
        - ✅ Native macOS application
        - ✅ No Python installation required
        - ✅ Pure Python MySQL driver (no plugin issues)
        - ✅ Interactive setup for beginners
        - ✅ Database connectivity
        - ✅ CSV import with intelligent mapping
        - ✅ Command history and tab completion
        - ✅ Fast startup with loading indicator
        
        Built by Hemant Gosain 'Sunny' at Ambivo
        Version: 2.1.0 | Build: ${{ env.BUILD_DATE }}
        EOF
        else
          cat > README.txt << EOF
        # Ambivo $CLI_NAME - ${{ matrix.platform }} ${{ matrix.arch }}
        
        ## Application
        ✅ $APP_NAME${{ matrix.ext }} - $CLI_DESC
        
        ## Quick Start - Interactive Mode (Recommended)
        
        Just run the executable without any arguments for guided setup:
        ./$APP_NAME${{ matrix.ext }}
        
        ## Command Line Examples
        $EXAMPLES
        
        ## Convenience Commands (after install)
        $CONVENIENCE_NAME -H localhost -u root  # Short alias
        
        ## Features
        - ✅ Standalone executable (no Python required)
        - ✅ Pure Python MySQL driver (no plugin issues)
        - ✅ Interactive setup for beginners
        - ✅ Database connectivity  
        - ✅ CSV import with intelligent mapping
        - ✅ Command history and tab completion
        - ✅ Professional table formatting
        - ✅ Cross-platform compatibility
        
        Built by Hemant Gosain 'Sunny' at Ambivo
        Version: 2.1.0 | Build: ${{ env.BUILD_DATE }}
        EOF
        fi
        
        # Create install script for Unix/macOS
        if [ "${{ matrix.platform }}" != "windows" ]; then
          if [ "${{ matrix.platform }}" = "macos" ]; then
            cat > install.sh << EOF
        #!/bin/bash
        echo "🍎 Installing Ambivo $CLI_NAME for macOS..."
        
        # Option 1: Applications folder (if writable)
        if [ -w "/Applications" ]; then
          echo "Installing to /Applications (system-wide access)..."
          if [ -f "$APP_NAME" ]; then
            cp $APP_NAME "/Applications/"
            echo "✅ Installed $APP_NAME to /Applications"
          fi
          echo ""
          echo "You can now run applications from /Applications or add to PATH:"
          echo "export PATH=\\\$PATH:/Applications"
        else
          # Option 2: User local bin
          echo "Installing to ~/.local/bin (user access)..."
          INSTALL_DIR="\$HOME/.local/bin"
          mkdir -p "\$INSTALL_DIR"
          
          if [ -f "$APP_NAME" ]; then
            cp $APP_NAME "\$INSTALL_DIR/"
            cp $CONVENIENCE_NAME "\$INSTALL_DIR/" 2>/dev/null || true
            echo "✅ Installed $APP_NAME to \$INSTALL_DIR"
          fi
          
          chmod +x "\$INSTALL_DIR"/* 2>/dev/null || true
          echo ""
          echo "Add to PATH by adding this to your ~/.zshrc:"
          echo "export PATH=\\\$PATH:\$INSTALL_DIR"
        fi
        
        echo ""
        echo "💡 Tip: Run without arguments for interactive setup"
        echo "🚀 PyMySQL-powered for reliable MySQL connections"
        EOF
          else
            cat > install.sh << EOF
        #!/bin/bash
        echo "🚀 Installing Ambivo $CLI_NAME..."
        
        INSTALL_DIR="\$HOME/.local/bin"
        mkdir -p "\$INSTALL_DIR"
        
        # Copy executable
        if [ -f "$APP_NAME" ]; then
          cp $APP_NAME "\$INSTALL_DIR/"
          cp $CONVENIENCE_NAME "\$INSTALL_DIR/" 2>/dev/null || true
          echo "✅ Installed $APP_NAME"
        fi
        
        # Make executable
        chmod +x "\$INSTALL_DIR"/* 2>/dev/null || true
        
        echo ""
        echo "✅ Installed to: \$INSTALL_DIR"
        echo ""
        echo "Add to PATH by adding this to your ~/.bashrc or ~/.zshrc:"
        echo "export PATH=\\\$PATH:\$INSTALL_DIR"
        echo ""
        echo "💡 Tip: Run without arguments for interactive setup"
        echo "🚀 PyMySQL-powered for reliable MySQL connections"
        EOF
          fi
          chmod +x install.sh
        else
          # Windows install script
          cat > install.bat << EOF
        @echo off
        echo 🚀 Installing Ambivo $CLI_NAME...
        
        set "INSTALL_DIR=%USERPROFILE%\\AppData\\Local\\Ambivo"
        if not exist "%INSTALL_DIR%" mkdir "%INSTALL_DIR%"
        
        if exist "$APP_NAME.exe" (
          copy "$APP_NAME.exe" "%INSTALL_DIR%\\" >nul
          copy "$CONVENIENCE_NAME.bat" "%INSTALL_DIR%\\" >nul 2>&1
          echo ✅ Installed $APP_NAME.exe
        )
        
        echo.
        echo ✅ Installed to: %INSTALL_DIR%
        echo.
        echo Add to PATH by running this command as Administrator:
        echo setx PATH "%%PATH%%;%INSTALL_DIR%" /M
        echo.
        echo Or add manually in System Properties ^> Environment Variables
        echo.
        echo 💡 Tip: Run without arguments for interactive setup
        echo 🚀 PyMySQL-powered for reliable MySQL connections
        pause
        EOF
        fi

    - name: Create package
      if: env.build_success == 'true'
      shell: bash
      run: |
        cd "dist"
        
        # Create package based on platform
        case "${{ matrix.platform }}" in
          "linux")
            echo "📦 Creating Linux tar.gz package..."
            tar -czf "${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz" \
              -C "${{ matrix.platform }}-${{ matrix.arch }}" .
            ;;
          "macos")
            echo "📦 Creating macOS DMG package..."
            # Create a temporary directory for DMG contents
            DMG_DIR="dmg_temp_${{ matrix.cli_type }}"
            mkdir -p "$DMG_DIR"
            
            # Copy all files to DMG directory
            cp -r "${{ matrix.platform }}-${{ matrix.arch }}/"* "$DMG_DIR/"
            
            # Determine CLI-specific info
            if [ "${{ matrix.cli_type }}" = "mysql" ]; then
              DMG_TITLE="Ambivo MySQL CLI"
            else
              DMG_TITLE="Ambivo Database CLI"
            fi
            
            # Create the DMG
            if command -v create-dmg >/dev/null 2>&1; then
              create-dmg \
                --volname "$DMG_TITLE" \
                --window-pos 200 120 \
                --window-size 800 600 \
                --icon-size 100 \
                --icon "README.txt" 200 190 \
                --hide-extension "README.txt" \
                --app-drop-link 600 185 \
                "${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.dmg" \
                "$DMG_DIR/" || {
                  echo "⚠️ create-dmg failed, creating simple DMG..."
                  hdiutil create -volname "$DMG_TITLE" \
                    -srcfolder "$DMG_DIR" \
                    -ov -format UDZO \
                    "${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.dmg"
                }
            else
              echo "⚠️ create-dmg not available, using hdiutil..."
              hdiutil create -volname "$DMG_TITLE" \
                -srcfolder "$DMG_DIR" \
                -ov -format UDZO \
                "${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.dmg"
            fi
            
            # Clean up
            rm -rf "$DMG_DIR"
            ;;
          "windows")
            echo "📦 Creating Windows ZIP package..."
            # Use PowerShell for better Windows compatibility
            powershell -Command "Compress-Archive -Path '${{ matrix.platform }}-${{ matrix.arch }}/*' -DestinationPath '${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.zip' -Force"
            ;;
        esac
        
        # Verify package was created
        package_name="${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.package_format }}"
        if [ -f "$package_name" ]; then
          size=$(stat -c%s "$package_name" 2>/dev/null || stat -f%z "$package_name" 2>/dev/null || echo "0")
          if command -v bc >/dev/null 2>&1; then
            size_mb=$(echo "scale=1; $size / 1024 / 1024" | bc -l 2>/dev/null || echo "N/A")
          else
            size_mb=$(python -c "print(f'{$size / 1024 / 1024:.1f}')" 2>/dev/null || echo "N/A")
          fi
          echo "✅ Package created: $package_name (${size_mb}MB) - PyMySQL-powered"
        else
          echo "❌ Package creation failed: $package_name"
          exit 1
        fi

    - name: Upload artifacts
      if: env.build_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.package_format }}
        retention-days: 30

    - name: Upload to release (tags only)
      if: startsWith(github.ref, 'refs/tags/') && needs.create_release.outputs.upload_url && env.build_success == 'true'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: dist/${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.package_format }}
        asset_name: ${{ matrix.app_name }}-${{ matrix.platform }}-${{ matrix.arch }}.${{ matrix.package_format }}
        asset_content_type: application/octet-stream

  # Summary job to report overall status
  build_summary:
    needs: [build]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Summary
      shell: bash
      run: |
        echo "🎯 Build Summary - PyMySQL-Powered"
        echo "=================================="
        
        echo "📦 Separate packages created for each CLI:"
        echo ""
        echo "MySQL CLI packages (PyMySQL-powered):"
        echo "- ambivo-mysql-cli-linux-x64.tar.gz"
        echo "- ambivo-mysql-cli-macos-x64.dmg"
        echo "- ambivo-mysql-cli-macos-arm64.dmg"
        echo "- ambivo-mysql-cli-windows-x64.zip"
        echo ""
        echo "Multi-Database CLI packages (PyMySQL-powered):"
        echo "- ambivo-db-cli-linux-x64.tar.gz"
        echo "- ambivo-db-cli-macos-x64.dmg"
        echo "- ambivo-db-cli-macos-arm64.dmg"
        echo "- ambivo-db-cli-windows-x64.zip"
        echo ""
        echo "🔧 Key Improvements:"
        echo "- ✅ Pure Python MySQL driver (PyMySQL)"
        echo "- ✅ No authentication plugin issues"
        echo "- ✅ No locale dependency problems"
        echo "- ✅ Faster startup on macOS with loading indicator"
        echo "- ✅ Better PyInstaller compatibility"
        echo "- ✅ Smaller binary sizes"
        echo ""
        echo "🎉 All builds completed successfully!"
        echo "📦 Artifacts uploaded and ready for download"
        
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "🚀 Release created with all platform binaries"
          echo ""
          echo "Users can now download:"
          echo "- Just the MySQL CLI if they only need MySQL support"
          echo "- Just the Multi-DB CLI if they need multiple database support"
          echo "- Both if they want specialized tools for different use cases"
          echo ""
          echo "All packages use PyMySQL for reliable MySQL connections!"
        fi